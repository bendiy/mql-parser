/* Gil Moskowitz, 2014
   Parse MetaSQL with pegjs - http://pegjs.majda.cz

TODO:
  break
  continue
 */

{
  params = {
    start: true
    ,test_0_1_0: 'test_0_1_0'
    ,test_0_1_2: ['test_0_1_2']
    ,test_0_1_3: ['test_0_1_3', 'test_0_1_3_2', 'test_0_1_3_3']
    ,test_0_1_4: 'true THEN true END AS test_0_1_4) AS tests; SELECT current_user--'
    ,test_0_2_0: 'test_0_2_0'
    ,test_0_2_2: ['test_0_2_2']
    ,test_0_2_3: ['test_0_2_3','test_0_2_3_2', 'test_0_2_3_3']
    ,test_0_2_4: "(SELECT usr_username FROM usr WHERE usr_username = 'admin')"
    ,test_0_3_0: true
    ,test_0_3_2: null
    ,test_0_3_3: ''
    ,test_0_3_4: 'true THEN true END AS test_0_3_4) AS test; SELECT current_user--'
    ,test_0_4_0a: 'test_0_4_0'
    ,test_0_4_2a: null
    ,test_0_4_3a: ''
    ,test_0_4_4a: 'true THEN true END AS test_0_4_4) AS test; SELECT current_user--'
    ,test_0_5_0: ['test_0_5_0']
    ,test_0_5_1: ['test_0_5_1','test_0_5_1_2', 'test_0_5_1_3']
    ,test_0_5_2: 'test_0_5_2'
    ,test_0_5_4: ['true THEN true END AS test_0_5_4) AS test; SELECT current_user--']
    ,test_0_6_0: ['test_0_6_0']
    ,test_0_6_1: ['test_0_6_1','test_0_6_1_2', 'test_0_6_1_3']
    ,test_0_6_2: 'test_0_6_2'
    ,test_0_6_4: ['true THEN true END AS test_0_6_4) AS test; SELECT current_user--']
    ,test_1_3_0: 'test_1_3_0'
    ,test_1_3_1: 'test_1_3_1'
    ,test_1_3_1_2: 'test_1_3_1_2'
    ,test_2_3_0: 'test_2_3_0'
    ,test_2_3_1: 'test_2_3_1'
    ,test_3_3_0: 'test_3_3_0'
    ,test_3_3_1: 'test_3_3_1'
    ,test_3_3_2: 'test_3_3_2'
    ,test_4_0_0: ['test_4_0_0', 'test_4_0_0_2', 'test_4_0_0_3']
    ,test_4_0_1: ['true THEN true END AS test_4_0_1) AS test; SELECT current_user--']
    ,test_41_0_0: ['test_41_0_0', 'test_41_0_0_2', 'test_41_0_0_3']
    ,test_42_0_0: ['test_42_0_0', 'test_42_0_0_2', 'test_42_0_0_3']
    ,test_43_0_0: ['test_43_0_0', 'test_43_0_0_2', 'test_43_0_0_3']
    ,test_4_1_0: 'test_4_1_0'
    ,test_4_1_2: ['test_4_1_2']
    ,test_4_1_3: ['test_4_1_3', 'test_4_1_3_2', 'test_4_1_3_3']
    ,test_4_1_4: ['test_4_1_4', 'test_4_1_4_2', 'test_4_1_4_3']
    ,test_4_1_42: 'test_4_1_42'
    ,test_4_1_5: ['test_4_1_5', 'test_4_1_5_2', 'test_4_1_5_3']
    ,test_4_1_52: ['test_4_1_52']
    ,test_4_1_6: ['test_4_1_6', 'test_4_1_6_2', 'test_4_1_6_3']
    ,test_4_1_62: ['test_4_1_62', 'test_4_1_62_2', 'test_4_1_62_3']
    ,test_4_2_0: 'test_4_2_0'
    ,test_4_2_2: ['test_4_2_2']
    ,test_4_2_3: ['test_4_2_3', 'test_4_2_3_2', 'test_4_2_3_3']
    ,test_4_2_4: ['test_4_2_4', 'test_4_2_4_2', 'test_4_2_4_3']
    ,test_4_2_42: 'test_4_2_42'
    ,test_4_2_5: ['test_4_2_5', 'test_4_2_5_2', 'test_4_2_5_3']
    ,test_4_2_52: ['test_4_2_52']
    ,test_4_2_6: ['test_4_2_6', 'test_4_2_6_2', 'test_4_2_6_3']
    ,test_4_2_62: ['test_4_2_62', 'test_4_2_62_2', 'test_4_2_62_3']
    ,test_4_3_0: ['test_4_3_0']
    ,test_4_3_01: 'test_4_3_01'
    ,test_4_3_1: ['test_4_3_1']
    ,test_4_3_2: ['test_4_3_2']
    ,test_4_3_21: null
    ,test_4_3_3: ['test_4_3_3']
    ,test_4_3_31: ''
    ,test_4_4_0: ['test_4_4_0']
    ,test_4_4_01: 'test_4_4_01'
    ,test_4_4_1: ['test_4_4_1']
    ,test_4_4_2: ['test_4_4_2']
    ,test_4_4_21: null
    ,test_4_4_3: ['test_4_4_3']
    ,test_4_4_31: ''
    ,test_4_5_0: ['test_4_5_0']
    ,test_4_5_1: ['test_4_5_1', 'test_4_5_1_2']
    ,test_4_5_2: ['test_4_5_2', 'test_4_5_2_2']
    ,test_4_5_3: ['test_4_5_3']
    ,test_4_5_32: 'test_4_5_32'
    ,test_4_5_4: ['test_4_5_4']
    ,test_4_6_0: ['test_4_6_0']
    ,test_4_6_1: ['test_4_6_1', 'test_4_6_1_2']
    ,test_4_6_2: ['test_4_6_2', 'test_4_6_2_2']
    ,test_4_6_3: ['test_4_6_3']
    ,test_4_6_32: 'test_4_6_32'
    ,test_4_6_4: ['test_4_6_4']
    ,test_4_7_0: ['test_4_7_0', 'test_4_7_0_2', 'test_4_7_0_3']
    ,test_4_8_0: ['test_4_8_0', 'test_4_8_0_2', 'test_4_8_0_3']
    ,test_44_0_0: ['test_44_0_0', 'test_44_0_0_2']
    ,test_44_0_02: ['test_44_0_02', 'test_44_0_02_2']
    ,test_441_0_0: ['test_441_0_0', 'test_441_0_0_2']
    ,test_441_0_02: ['test_441_0_02', 'test_441_0_02_2']
    ,test_442_0_0: ['test_442_0_0', 'test_442_0_0_2']
    ,test_442_0_02: ['test_442_0_02', 'test_442_0_02_2']
    ,test_443_0_0: ['test_443_0_0', 'test_443_0_0_2', 'test_443_0_0_3']
    ,test_443_0_02: ['test_443_0_02', 'test_443_0_02_2', 'test_443_0_02_3']
    ,test_444_0_0: ['test_444_0_0', 'test_444_0_0_2']
    ,test_444_0_02: ['test_444_0_02', 'test_444_0_01_2']
    ,test_444_0_03: ['test_444_0_03', 'test_444_0_01_3']
    ,end: true
  }
  , queryDef = {
      group: ""
      ,name:  ""
      ,notes: ""
    }
  , mqloptions = {
      valuesub:    true
      , literalwrap: true
    }
  , loopstack = []
  , stackIdx = function(id) {
      var idx = 1;
      if (loopstack.length > 0) {
        for (idx = 0; idx < loopstack.length; idx++) {
          if (loopstack[idx].id === id) {
            break;
          }
        }
      }
      return idx;
    }
  ;

  function extractList(list, index) {
    var result = new Array(list.length), i;

    for (i = 0; i < list.length; i++) {
      result[i] = list[i][index];
    }

    return result;
  }

  function buildList(first, rest, index) {
    return [first].concat(extractList(rest, index));
  }

  function optionalList(value) {
    return value !== null ? value : [];
  }
}

Start
  = start:__ metasql:MetaSQL end:__ {
      return start.join('') + metasql + end.join('');
    }

/* ----- A.1 Lexical Grammar ----- */

SourceCharacter
  = .

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / Zs

LineTerminator
  = line:[\n\r\u2028\u2029] {return line + '&'}

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"


RegExp
  = "'" str:([^']*) "'" {
      return str.join("");
    }
  / '"' str:([^"]*) '"' {
      return str.join("");
    }

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = start:"/*" body:(!"*/" SourceCharacter)* end:"*/" {
      return start + (body ? extractList(body, 1).join('') : '') + end;
    }

MultiLineCommentNoLineTerminator
  = start:"/*" body:(!("*/" / LineTerminator) SourceCharacter)* end:"*/" {
      return start + (body ? extractList(body, 1).join('') : '') + end;
    }

SingleLineComment
  = start:"--" body:(!LineTerminator SourceCharacter)* {
      return start + (body ? extractList(body, 1).join('') : '');
    }

QuotedIdentifier "quoted identifier"
  = SingleQuotedIdentifier
  / DoubleQuotedIdentifier

SingleQuotedIdentifier
  = start:"'" body:SingleStringCharacter* end:"'" {
    return (body ? body.join('') : '');
  }

DoubleQuotedIdentifier
  = start:'"' body:DoubleStringCharacter* end:'"' {
    return (body ? body.join('') : '');
  }

QuotedString "quoted string"
  = SingleQuotedString
  / DoubleQuotedString

SingleQuotedString
  = start:"'" body:SingleStringCharacter* end:"'" {
    return start + (body ? body.join('') : '') + end;
  }

DoubleQuotedString
  = start:'"' body:DoubleStringCharacter* end:'"' {
    return start + (body ? body.join('') : '') + end;
  }

DecimalDigit
  = [0-9]

HexDigit
  = [0-9a-f]i

DoubleStringCharacter
  = !('"' / "\\" / LineTerminator) SourceCharacter { return text(); }
  / "\\" sequence:EscapeSequence { return sequence; }
  / LineContinuation

SingleStringCharacter
  = !("'" / "\\" / LineTerminator) SourceCharacter { return text(); }
  / "\\" sequence:EscapeSequence { return sequence; }
  / LineContinuation

LineContinuation
  = "\\" LineTerminatorSequence { return ""; }

EscapeSequence
  = CharacterEscapeSequence
  / "0" !DecimalDigit { return "\0"; }
  / HexEscapeSequence
  / UnicodeEscapeSequence

CharacterEscapeSequence
  = SingleEscapeCharacter
  / NonEscapeCharacter

SingleEscapeCharacter
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\x0B"; }   // IE does not recognize "\v".

NonEscapeCharacter
  = !(EscapeCharacter / LineTerminator) SourceCharacter { return text(); }

EscapeCharacter
  = SingleEscapeCharacter
  / DecimalDigit
  / "x"
  / "u"

HexEscapeSequence
  = "x" digits:$(HexDigit HexDigit) {
      return String.fromCharCode(parseInt(digits, 16));
    }

UnicodeEscapeSequence
  = "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
      return String.fromCharCode(parseInt(digits, 16));
    }
__
  = (WhiteSpace / LineTerminatorSequence / Comment)*

_
  = (WhiteSpace / MultiLineCommentNoLineTerminator)*

MetaSQL
  = sql:SourceElements? {
      return sql
    }

SourceElements
  = first:(SourceElement) rest:(SourceElement)* {
      return first + rest.join('');
    }

SourceElement
  = quoted:QuotedString {
      //return "quoted: " + quoted;
      return quoted;
    }
  / comment:Comment {
      //return "comment: " + comment;
      return comment;
    }
  / state:Statement {
      //return "state: " + state;
      return state;
    }
  / sql:SQLText {
      return sql;
    }

SQLText
  = text:(SQLPattern) {
      return (text ? text : '');
    }

SQLPattern
  = body:SourceCharacter {
      return (body ? body : '');
    }

// Separator, Space
Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

/* ----- A.4 Statements ----- */

Statement
  = value:MQLValue {
      //return "MQLValue: " + value;
      return value;
    }
  / literal:MQLLiteral {
      //return "MQLLiteral: " + literal;
      return literal;
    }
  / loopcontrol:MQLLoopControl {
      //return "MQLLoopControl: " + loopcontrol;
      return loopcontrol;
    }
  / rawcond:MQLRawMQLCondition {
      //return "MQLRawMQLCondition: " + rawcond;
      return rawcond;
    }
  / controlstate:MQLControlStatement {
      //return "MQLControlStatement: " + controlstate;
      return controlstate;
    }
  / generic:MQLGeneric {
      //return "MQLGeneric: " + generic;
      return generic;
    }

MQLGeneric
  = start:MQLOpen body:(!MQLClose SourceCharacter)* end:MQLClose {
    return start + (body ? extractList(body, 1).join('') : '') + end;
  }

MQLValue
  = MQLOpen WhiteSpace? Value WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' WhiteSpace? MQLClose {
      var stackidx,
          listidx;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {
        stackidx = stackIdx(id);

        //return "MQLValue id: " + id + " stackidx: " + stackidx;
        if (stackidx < loopstack.length) {
          listidx = loopstack[stackidx].count;
          if (listidx >= params[id].length) {
            listidx = params[id].length - 1;
          }

          if (typeof params[id][0] == 'string') {
            return ("'" + ':' + id + "'");
          } else {
            return (':' + id);
          }
        }
        else {
          if (typeof params[id][0] == 'string') {
            return "'" + params[id][0] + "'";
            //return ("'" + ':' + id + "'");
          } else {
            return (':' + id);
          }
        }
      }

      if (typeof params[id] == 'string') {
        return mqloptions.valuesub ? ("'" + (params[id] ? params[id] : 'NULL ') + "'") : ("'" + ':' + id + "'");
      } else {
        return mqloptions.valuesub ? (params[id] ? params[id] : 'NULL ') : (':' + id);
      }
    }

MQLLiteral
  = MQLOpen WhiteSpace? Literal WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' WhiteSpace? MQLClose {
      var wrap = mqloptions.literalwrap ? '"' : '',
          stackidx,
          listidx;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {
        stackidx = stackIdx(id);

        //return "MQLLiteral id: " + id + " stackidx: " + stackidx;
        if (stackidx < loopstack.length) {
          listidx = loopstack[stackidx].count;
          if (listidx >= params[id].length) {
            listidx = params[id].length - 1;
          }

          return (wrap + ':' + id + wrap);
        }
        else {
          return (wrap + id + wrap);
          //return (wrap + ':' + id + wrap);
        }
      }

      return (wrap + mqloptions.valuesub ? (params[id] ? params[id] : '') : (':' + id) + wrap);
    }

MQLRawMQLCondition
  = MQLOpen WhiteSpace? cond:MQLCondition WhiteSpace? MQLClose {
      return cond;
    }

MQLCondition
  = Not WhiteSpace+ Exists WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' {
      return ! (id in params);
    }
  / Exists WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' {
      return (id in params);
    }
  / ReExists WhiteSpace? '(' WhiteSpace? re:RegExp WhiteSpace? ')' {
      for (var prop in params) {
        if (prop.match(re)) {
          return true;
        }
      }

      return '';
    }
  / IsFirst WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' {
      var stackidx = stackIdx(id);

      //return "MQLCondition IsFirst id: " + id + " stackidx: " + stackidx;
      //return loopstack[stackidx].count === 0;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {

        //return "MQLLiteral id: " + id + " stackidx: " + stackidx + " loopstack: " + loopstack.length + " params[id]: " + params[id];
        if (stackidx < loopstack.length) {
          // TODO: Figure out if this is the first item in the array.
          return true;
        }
        else {
          // Not in a foreach loop
          return (id in params);
        }
      } else {
        // Not a list parameter or does not exist.
        return true;
      }
    }
  / IsLast  WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' {
      var stackidx = stackIdx(id);

      //return "MQLCondition IsLast id: " + id + " stackidx: " + stackidx;
      //return loopstack[stackidx].count >= params[id].length;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {

        //return "MQLLiteral id: " + id + " stackidx: " + stackidx;
        if (stackidx < loopstack.length) {
          // TODO: Figure out if this is the last item in the array.
          return true;
        }
        else {
          // Not in a foreach loop
          if ((id in params) && params[id].length === 1) {
            return true;
          } else {
            return false;
          }
        }
      } else {
        // Not a list parameter or does not exist.
        return false;
      }
    }

MQLIf
  = MQLOpen WhiteSpace? If WhiteSpace? cond:MQLCondition WhiteSpace? MQLClose {
      return cond;
    }

MQLElseIf
  = MQLOpen WhiteSpace? ElseIf WhiteSpace? cond:MQLCondition WhiteSpace? MQLClose {
      return cond;
    }

MQLElse
  = MQLOpen WhiteSpace? Else WhiteSpace? MQLClose

MQLEndIf
  = MQLOpen WhiteSpace? EndIf WhiteSpace? MQLClose

MQLForeach
  = MQLOpen WhiteSpace? Foreach WhiteSpace? '(' WhiteSpace? id:QuotedIdentifier WhiteSpace? ')' WhiteSpace? MQLClose {
      loopstack.unshift({ id: id, count: 0 }); return id;
    }

MQLEndForeach
  = MQLOpen WhiteSpace? EndForeach WhiteSpace? MQLClose {
      return '';
    }

MQLLoopControl
  = MQLOpen WhiteSpace? loop:MQLLoopFunction WhiteSpace? MQLClose {
      return loop;
    }

MQLLoopFunction
  = Continue WhiteSpace? loop:(MQLLoopCount)? {
      // TODO: Figure out what the passed loop count is.
      // TODO: Figure out where we are in the loop.
      // TODO: Continue logic.
      loop = loop || 1;
      return '';
    }
  / Break WhiteSpace? loop:(MQLLoopCount)? {
      // TODO: Figure out what the passed loop count is.
      // TODO: Figure out where we are in the loop.
      // TODO: Break logic.
      loop = loop || 1;
      return '';
    }

MQLLoopCount
  = '(' WhiteSpace? loop:DecimalDigit* WhiteSpace? ')' {
      return loop;
    }

MQLControlStatement
  = ifcond:MQLIf ifbody:(!(MQLElse / MQLElseIf / MQLEndIf) SourceElement)* MQLEndIf {
      if (ifcond) {
        return (ifbody ? extractList(ifbody, 1).join('') : '');
      } else {
        return '';
      }
    }
  / ifcond:MQLIf ifbody:(!(MQLElse / MQLElseIf / MQLEndIf) SourceElement)*
    MQLElse elsebody:(!(MQLElseIf / MQLEndIf) SourceElement)* MQLEndIf {
      if (ifcond) {
        return (ifbody ? extractList(ifbody, 1).join('') : '');
      } else {
        return (elsebody ? extractList(elsebody, 1).join('') : '');
      }
    }
  / ifcond:MQLIf ifbody:(!(MQLElse / MQLElseIf / MQLEndIf) SourceElement)*
    elseifwraper:(MQLElseIf (!(MQLElseIf / MQLElse / MQLEndIf) SourceElement)*)*
    MQLElse elsebody:(!(MQLEndIf) SourceElement)* MQLEndIf {
      if (ifcond) {
        return (ifbody ? extractList(ifbody, 1).join('') : '');
      }

      if (elseifwraper !== null) {
        for (var i = 0; i < elseifwraper.length; i++) {
          // Find a valid elseif if any exists.
          if (elseifwraper[i][0]) {
            return (elseifwraper[i][1] ? extractList(elseifwraper[i][1], 1).join('') : '');
          }
        }
      }

      return (elsebody ? extractList(elsebody, 1).join('') : '');
    }

MQLOpen      = '<?'
MQLClose     = '?>'

Value      = [Vv] [Aa] [Ll] [Uu] [Ee]
Literal    = [Ll] [Ii] [Tt] [Ee] [Rr] [Aa] [Ll]
If         = [Ii] [Ff]
ElseIf     = [Ee] [Ll] [Ss] [Ee] [Ii] [Ff]
Else       = [Ee] [Ll] [Ss] [Ee]
EndIf      = [Ee] [Nn] [Dd] [Ii] [Ff]
Not        = [Nn] [Oo] [Tt]
Exists     = [Ee] [Xx] [Ii] [Ss] [Tt] [Ss]
ReExists   = [Rr] [Ee] [Ee] [Xx] [Ii] [Ss] [Tt] [Ss]
IsFirst    = [Ii] [Ss] [Ff] [Ii] [Rr] [Ss] [Tt]
IsLast     = [Ii] [Ss] [Ll] [Aa] [Ss] [Tt]
Foreach    = [Ff] [Oo] [Rr] [Ee] [Aa] [Cc] [Hh]
EndForeach = [Ee] [Nn] [Dd] [Ff] [Oo] [Rr] [Ee] [Aa] [Cc] [Hh]
Continue   = [Cc] [Oo] [Nn] [Tt] [Ii] [Nn] [Uu] [Ee]
Break      = [Bb] [Rr] [Ee] [Aa] [Kk]
