/*
 * Gil Moskowitz, 2014
 * Parse MetaSQL with pegjs - http://pegjs.majda.cz
 */

{
  var params = {
    asset:        "asset account"
  , expense:      "expense account"
  , liability:    "liability account"
  , equity:       "equity account"
  , showExternal: true
//, showInactive: true
  };

  var queryDef = {
    group: ""
  , name: ""
  , notes: ""
  };
}

start
  = text:querytext ';'?      { return "/* group: " + queryDef.group
                                  + "\n   name: "  + queryDef.name
                                  + "\n   notes: " + queryDef.notes
                                  + "\n"           + text }
  
querytext
  = sqltext       ws? querytext*
  / mqlclause     ws? querytext*
  / linecomment+  ws? querytext*
  / BLOCKCOMMENT+ ws? querytext*

sqltext
  = ws? text:([a-zA-Z0-9,/._*=\'\":()~ \t\n]+)  { return text.join("") }

ws
  = [ \t\n]+

mqlclause
  = ws? value:mqlvalue                          { return value }
  / ws? literal:mqlliteral                      { return literal }
  / ws? ifcond:mqlif iftext:querytext
    elifcond:(cond:mqlelseif text:querytext)*
    elsetext:(mqlelse querytext)?
    mqlendif
    { if (ifcond) { return iftext }
      if (elifcond !== null) {
        for (var i = 0; i < elifcond.length; i++) {
          if (elifcond[i].cond) { return elifcond[i].text }
        }
      }
      return elsetext
    }
  / ws? list:mqlforeach querytext? mqlendforeach { return list }

mqlvalue
  = MQLOPEN ws? VALUE ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE { return "val: " + id }
  
mqlliteral
  = MQLOPEN ws? LITERAL ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE { return "lit: " + id }

linecomment
  = groupcomment
  / namecomment
  / notescomment
  / simplelinecomment

mqlif
  = MQLOPEN ws? IF ws? cond:mqlcondition ws? MQLCLOSE           { return cond }

mqlelseif
  = MQLOPEN ws? ELSEIF ws? cond:mqlcondition ws? MQLCLOSE       { return cond }

mqlelse
  = MQLOPEN ws? ELSE ws? MQLCLOSE

mqlendif
  = MQLOPEN ws? ENDIF ws? MQLCLOSE

mqlforeach
  = MQLOPEN ws? FOREACH ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE { return "foreach: " + id }

mqlendforeach
  = MQLOPEN ws? ENDFOREACH ws? MQLCLOSE

mqlcondition
  = NOT ws+ EXISTS ws? '(' ws? id:quotedidentifier ws? ')'
    { return ! (id in params) }
  / EXISTS ws? '(' ws? id:quotedidentifier ws? ')'
    { return (id in params); }
  / REEXISTS ws? '(' ws? re:regexp ws? ')'
    { var prop;
      for (prop in params) {
        if (prop.match(re)) {
          return true;
        }
      }
      return false;
    }
  / ISFIRST ws? '(' ws? id:quotedidentifier ws? ')' { return 'isfirst?' }
  / ISLAST  ws? '(' ws? id:quotedidentifier ws? ')' { return 'islast?'  }

groupcomment
  = ws? '--' [ \t]* [Gg][Rr][Oo][Uu][Pp] [ \t]* ':' [ \t] id:identifier [ \t]* '\n' { queryDef.group = id }

namecomment
  = ws? '--' [ \t]* [Nn][Aa][Mm][Ee]     [ \t]* ':' [ \t] id:identifier [ \t]* '\n' { queryDef.name = id }

notescomment
  = ws? '--' [ \t]* [Nn][Oo][Tt][Ee][Ss] [ \t]* ':'
    first:linecommenttext '\n'
    rest:simplelinecomment* { queryDef.notes = first.join("") + " " + rest.join(" ") }

simplelinecomment
  = ws? '--' ws? content:([^\n]*) '\n'  { return content }

linecommenttext
  = ws? text:([^\n]*)                   { return text }

quotedidentifier
  = '"' id:identifier '"'               { return id }
  / "'" id:identifier "'"               { return id }

regexp
  = "'" str:([^']*) "'"                 { return str.join("") }
  / '"' str:([^"]*) '"'                 { return str.join("") }

identifier
  = first:[a-zA-Z_] rest:[a-zA-Z0-9_]*  { return first + rest.join("") }

VALUE      = 'value'
LITERAL    = 'literal'
IF         = 'if'
ELSEIF     = 'elseif'
ELSE       = 'else'
ENDIF      = 'endif'
NOT        = 'not'
EXISTS     = 'exists'
REEXISTS   = 'reExists'
ISFIRST    = 'isFirst'
ISLAST     = 'isLast'
FOREACH    = 'foreach'
ENDFOREACH = 'endforeach'

BLOCKCOMMENT = '/*' [.*] '*/'               { return "BLOCKCOMMENT" }
MQLOPEN      = '<?'                         { return "OPEN" }
MQLCLOSE     = '?>'                         { return "CLOSE" }
