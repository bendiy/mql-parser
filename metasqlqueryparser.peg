/* Gil Moskowitz, 2014
   Parse MetaSQL with pegjs - http://pegjs.majda.cz

TODO:
  break
  continue
 */

{
  params = {
    start: true
    ,test_0_1_0: 'test_0_1_0'
    ,test_0_1_2: ['test_0_1_2']
    ,test_0_1_3: ['test_0_1_3', 'test_0_1_3_2', 'test_0_1_3_3']
    ,test_0_1_4: 'true THEN true END AS test_0_1_4) AS tests; SELECT current_user--'
    ,test_0_2_0: 'test_0_2_0'
    ,test_0_2_2: ['test_0_2_2']
    ,test_0_2_3: ['test_0_2_3','test_0_2_3_2', 'test_0_2_3_3']
    ,test_0_2_4: "(SELECT usr_username FROM usr WHERE usr_username = 'admin')"
    ,test_0_3_0: true
    ,test_0_3_2: null
    ,test_0_3_3: ''
    ,test_0_3_4: 'true THEN true END AS test_0_3_4) AS test; SELECT current_user--'
    ,test_0_4_0a: 'test_0_4_0'
    ,test_0_4_2a: null
    ,test_0_4_3a: ''
    ,test_0_4_4a: 'true THEN true END AS test_0_4_4) AS test; SELECT current_user--'
    ,test_0_5_0: ['test_0_5_0']
    ,test_0_5_1: ['test_0_5_1','test_0_5_1_2', 'test_0_5_1_3']
    ,test_0_5_2: 'test_0_5_2'
    ,test_0_5_4: ['true THEN true END AS test_0_5_4) AS test; SELECT current_user--']
    ,test_0_6_0: ['test_0_6_0']
    ,test_0_6_1: ['test_0_6_1','test_0_6_1_2', 'test_0_6_1_3']
    ,test_0_6_2: 'test_0_6_2'
    ,test_0_6_4: ['true THEN true END AS test_0_6_4) AS test; SELECT current_user--']
    ,test_1_1_0: 'test_1_1_0'
    ,test_2_1_0: 'test_2_1_0'
    ,test_3_1_0: 'test_3_1_0'
    ,test_4_0_0: ['test_4_0_0', 'test_4_0_0_2', 'test_4_0_0_3']
    ,test_4_0_1: ['true THEN true END AS test_4_0_1) AS test; SELECT current_user--']
    ,test_41_0_0: ['test_41_0_0', 'test_41_0_0_2', 'test_41_0_0_3']
    ,test_42_0_0: ['test_42_0_0', 'test_42_0_0_2', 'test_42_0_0_3']
    ,test_43_0_0: ['test_43_0_0', 'test_43_0_0_2', 'test_43_0_0_3']
    ,test_4_1_0: 'test_4_1_0'
    ,test_4_1_2: ['test_4_1_2']
    ,test_4_1_3: ['test_4_1_3', 'test_4_1_3_2', 'test_4_1_3_3']
    ,test_4_1_4: ['test_4_1_4', 'test_4_1_4_2', 'test_4_1_4_3']
    ,test_4_1_42: 'test_4_1_42'
    ,test_4_1_5: ['test_4_1_5', 'test_4_1_5_2', 'test_4_1_5_3']
    ,test_4_1_52: ['test_4_1_52']
    ,test_4_1_6: ['test_4_1_6', 'test_4_1_6_2', 'test_4_1_6_3']
    ,test_4_1_62: ['test_4_1_62', 'test_4_1_62_2', 'test_4_1_62_3']
    ,test_4_2_0: 'test_4_2_0'
    ,test_4_2_2: ['test_4_2_2']
    ,test_4_2_3: ['test_4_2_3', 'test_4_2_3_2', 'test_4_2_3_3']
    ,test_4_2_4: ['test_4_2_4', 'test_4_2_4_2', 'test_4_2_4_3']
    ,test_4_2_42: 'test_4_2_42'
    ,test_4_2_5: ['test_4_2_5', 'test_4_2_5_2', 'test_4_2_5_3']
    ,test_4_2_52: ['test_4_2_52']
    ,test_4_2_6: ['test_4_2_6', 'test_4_2_6_2', 'test_4_2_6_3']
    ,test_4_2_62: ['test_4_2_62', 'test_4_2_62_2', 'test_4_2_62_3']
    ,test_4_3_0: ['test_4_3_0']
    ,test_4_3_01: 'test_4_3_01'
    ,test_4_3_1: ['test_4_3_1']
    ,test_4_3_2: ['test_4_3_2']
    ,test_4_3_21: null
    ,test_4_3_3: ['test_4_3_3']
    ,test_4_3_31: ''
    ,test_4_4_0: ['test_4_4_0']
    ,test_4_4_01: 'test_4_4_01'
    ,test_4_4_1: ['test_4_4_1']
    ,test_4_4_2: ['test_4_4_2']
    ,test_4_4_21: null
    ,test_4_4_3: ['test_4_4_3']
    ,test_4_4_31: ''
    ,test_4_5_0: ['test_4_5_0']
    ,test_4_5_1: ['test_4_5_1', 'test_4_5_1_2']
    ,test_4_5_2: ['test_4_5_2', 'test_4_5_2_2']
    ,test_4_5_3: ['test_4_5_3']
    ,test_4_5_32: 'test_4_5_32'
    ,test_4_5_4: ['test_4_5_4']
    ,test_4_6_0: ['test_4_6_0']
    ,test_4_6_1: ['test_4_6_1', 'test_4_6_1_2']
    ,test_4_6_2: ['test_4_6_2', 'test_4_6_2_2']
    ,test_4_6_3: ['test_4_6_3']
    ,test_4_6_32: 'test_4_6_32'
    ,test_4_6_4: ['test_4_6_4']
    ,test_4_7_0: ['test_4_7_0', 'test_4_7_0_2', 'test_4_7_0_3']
    ,test_4_8_0: ['test_4_8_0', 'test_4_8_0_2', 'test_4_8_0_3']
    ,test_44_0_0: ['test_44_0_0', 'test_44_0_0_2']
    ,test_44_0_02: ['test_44_0_02', 'test_44_0_02_2']
    ,test_441_0_0: ['test_441_0_0', 'test_441_0_0_2']
    ,test_441_0_02: ['test_441_0_02', 'test_441_0_02_2']
    ,test_442_0_0: ['test_442_0_0', 'test_442_0_0_2']
    ,test_442_0_02: ['test_442_0_02', 'test_442_0_02_2']
    ,test_443_0_0: ['test_443_0_0', 'test_443_0_0_2', 'test_443_0_0_3']
    ,test_443_0_02: ['test_443_0_02', 'test_443_0_02_2', 'test_443_0_02_3']
    ,test_444_0_0: ['test_444_0_0', 'test_444_0_0_2']
    ,test_444_0_02: ['test_444_0_02', 'test_444_0_01_2']
    ,test_444_0_03: ['test_444_0_03', 'test_444_0_01_3']
    ,end: true
  }
  , queryDef = {
      group: ""
      ,name:  ""
      ,notes: ""
    }
  , mqloptions = {
      valuesub:    true
      , literalwrap: true
    }
  , loopstack = []
  , stackIdx = function(id) {
      var idx = 1;
      if (loopstack.length > 0) {
        for (idx = 0; idx < loopstack.length; idx++) {
          if (loopstack[idx].id === id) {
            break;
          }
        }
      }
      return idx;
    }
  ;
}

start
  = text:querytext ';'* {
      var result = '';

      if (queryDef.group && queryDef.name) {
        result = '/*\n   group: ' + queryDef.group
                 + '\n   name:  ' + queryDef.name
                 + '\n   notes: ' + queryDef.notes
                 + '\n */\n';
      }

      result += text;
      return result;
    }

querytext
  = linecomment+  ws? t2:(querytext*) {
      return t2.join('')
    }
  / MultiLineComment+ ws? t2:(querytext*) {
      return t2.join('')
    }
  / t1:sqltext    ws? t2:(querytext*) {
      return t1 + t2.join('')
    }
  / t1:mqlclause  ws? t2:(querytext*) {
      return t1 + t2.join('')
    }

sqltext
  = ws? text:(sqlpattern) {
      return text.join('');
    }
  / ws? "<" text:(sqlpattern) {
      return "<" + text.join('');
    }
  / ws? ">" text:(sqlpattern) {
      return ">" + text.join('');
    }
  / ws? "<>" text:(sqlpattern) {
      return "<>" + text.join('');
    }

sqlpattern
  = [a-zA-Z0-9,/.\-\|\+_*=\'\":()~ \t\n;]+

ws
  = [ \t\n\r]+

mqlclause
  = ws? value:mqlvalue {
      return value;
    }
  / ws? literal:mqlliteral {
      return literal;
    }
  / ws? cond:mqlrawmqlcondition {
      return cond;
    }
  / ws? ifcond:mqlif iftext:querytext
    elifcond:(cond:mqlelseif text:querytext)*
    mqlelse elsetext:querytext?
    mqlendif {
      if (ifcond) {
        return iftext;
      }

      if (elifcond !== null) {
        for (var i = 0; i < elifcond.length; i++) {
          if (elifcond[i].cond) {
            return elifcond[i].text;
          }
        }
      }

      return elsetext;
    }
  / ws? ifcond:mqlif iftext:querytext
    elifcond:(cond:mqlelseif text:querytext)*
    mqlendif {
      if (ifcond) {
        return iftext;
      }

      if (elifcond !== null) {
        for (var i = 0; i < elifcond.length; i++) {
          if (elifcond[i].cond) {
            return elifcond[i].text;
          }
        }
      }

      return '';
    }
  / ws? start:mqlforeach content:querytext? finish:mqlendforeach {
      var result = '',
          find = ":" + start,
          re = new RegExp(find, 'g'),
          stackidx = stackIdx(start);

      for (var i = 0; i < params[start].length; i++) {
        result += content.replace(re, params[start][i]);
        loopstack[stackidx].count++;
      }

      loopstack.shift().id;
      return result;
    }

mqlvalue
  = MQLOPEN ws? VALUE ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE {
      var stackidx,
          listidx;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {
        stackidx = stackIdx(id);
        if (stackidx < loopstack.length) {
          listidx = loopstack[stackidx].count;
          if (listidx >= params[id].length) {
            listidx = params[id].length - 1;
          }

          if (typeof params[id][0] == 'string') {
            return ("'" + ':' + id + "'");
          } else {
            return (':' + id);
          }
        }
        else {
          if (typeof params[id][0] == 'string') {
            return ("'" + ':' + id + "'");
          } else {
            return (':' + id);
          }
        }
      }

      if (typeof params[id] == 'string') {
        return mqloptions.valuesub ? ("'" + (params[id] ? params[id] : 'NULL ') + "'") : ("'" + ':' + id + "'");
      } else {
        return mqloptions.valuesub ? (params[id] ? params[id] : 'NULL ') : (':' + id);
      }
    }

mqlliteral
  = MQLOPEN ws? LITERAL ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE {
      var wrap = mqloptions.literalwrap ? '"' : '',
          stackidx,
          listidx;

      if (Object.prototype.toString.call(params[id]) === '[object Array]') {
        stackidx = stackIdx(id);
        if (stackidx < loopstack.length) {
          listidx = loopstack[stackidx].count;
          if (listidx >= params[id].length) {
            listidx = params[id].length - 1;
          }

          return (wrap + ':' + id + wrap);
        }
        else {
          return (wrap + ':' + id + wrap);
        }
      }

      return (wrap + mqloptions.valuesub ? (params[id] ? params[id] : '') : (':' + id) + wrap);
    }

linecomment
  = groupcomment
  / namecomment
  / notescomment
  / simplelinecomment

mqlif
  = MQLOPEN ws? IF ws? cond:mqlcondition ws? MQLCLOSE {
      return cond;
    }

mqlelseif
  = MQLOPEN ws? ELSEIF ws? cond:mqlcondition ws? MQLCLOSE {
      return cond;
    }

mqlelse
  = MQLOPEN ws? ELSE ws? MQLCLOSE

mqlendif
  = MQLOPEN ws? ENDIF ws? MQLCLOSE

mqlforeach
  = MQLOPEN ws? FOREACH ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE {
      loopstack.unshift({ id: id, count: 0 }); return id;
    }

mqlendforeach
  = MQLOPEN ws? ENDFOREACH ws? MQLCLOSE {
      return '';
    }

mqlrawmqlcondition
  = MQLOPEN ws? cond:mqlcondition ws? MQLCLOSE {
      return cond;
    }

mqlcondition
  = NOT ws+ EXISTS ws? '(' ws? id:quotedidentifier ws? ')' {
      return ! (id in params);
    }
  / EXISTS ws? '(' ws? id:quotedidentifier ws? ')' {
      return (id in params);
    }
  / REEXISTS ws? '(' ws? re:regexp ws? ')' {
      for (var prop in params) {
        if (prop.match(re)) {
          return true;
        }
      }

      return false;
    }
  / ISFIRST ws? '(' ws? id:quotedidentifier ws? ')' {
      return loopstack[stackIdx(id)].count === 0;
    }
  / ISLAST  ws? '(' ws? id:quotedidentifier ws? ')' {
      return loopstack[stackIdx(id)].count >= params[id].length;
    }

groupcomment
  = ws? '--' [ \t]? [Gg][Rr][Oo][Uu][Pp] [ \t]? ':' [ \t]? id:identifier [ \t]? '\n' {
      queryDef.group = id;
    }

namecomment
  = ws? '--' [ \t]? [Nn][Aa][Mm][Ee]     [ \t]? ':' [ \t]? id:identifier [ \t]? '\n' {
      queryDef.name = id;
    }

notescomment
  = ws? '--' [ \t]? [Nn][Oo][Tt][Ee][Ss] [ \t]? ':' content:([^\n]*)? '\n'
    rest:(simplelinecomment*) {
      queryDef.notes = rest.join(' ');
    }

simplelinecomment
  = ws? '--' ws? content:([^\n]*) '\n' {
      return content.join("");
    }

quotedidentifier
  = '"' id:identifier '"' {
      return id;
    }
  / "'" id:identifier "'" {
      return id;
    }

regexp
  = "'" str:([^']*) "'" {
      return str.join("");
    }
  / '"' str:([^"]*) '"' {
      return str.join("");
    }

identifier
  = first:[a-zA-Z_] rest:[a-zA-Z0-9_]* {
      return first + rest.join("");
    }

VALUE      = [Vv] [Aa] [Ll] [Uu] [Ee]
LITERAL    = [Ll] [Ii] [Tt] [Ee] [Rr] [Aa] [Ll]
IF         = [Ii] [Ff]
ELSEIF     = [Ee] [Ll] [Ss] [Ee] [Ii] [Ff]
ELSE       = [Ee] [Ll] [Ss] [Ee]
ENDIF      = [Ee] [Nn] [Dd] [Ii] [Ff]
NOT        = [Nn] [Oo] [Tt]
EXISTS     = [Ee] [Xx] [Ii] [Ss] [Tt] [Ss]
REEXISTS   = [Rr] [Ee] [Ee] [Xx] [Ii] [Ss] [Tt] [Ss]
ISFIRST    = [Ii] [Ss] [Ff] [Ii] [Rr] [Ss] [Tt]
ISLAST     = [Ii] [Ss] [Ll] [Aa] [Ss] [Tt]
FOREACH    = [Ff] [Oo] [Rr] [Ee] [Aa] [Cc] [Hh]
ENDFOREACH = [Ee] [Nn] [Dd] [Ff] [Oo] [Rr] [Ee] [Aa] [Cc] [Hh]

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

SourceCharacter
  = .

BLOCKCOMMENT = '/*' [.*\t\n\r]+ '*/'
MQLOPEN      = '<?'
MQLCLOSE     = '?>'
