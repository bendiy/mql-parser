/*
 * Gil Moskowitz, 2014
 * Parse MetaSQL with pegjs - http://pegjs.majda.cz
 */

{
  var params = {
    byCust:       true
//, byProdcat:    true
//, byItem:       true
//, period_id_list:     [1, 2, 3, 4, 5]
//, salesDollars:       true
//, baseCurrAbbr:       'USD'
//, capacityUnits:      'EA'
//, altCapacityUnits:   'CS'
//, inventoryUnits:     'DZ'
//, custgrp:            true
//, prodcategory:       true
//, item_id:            5
//, cust_id:            4
//, custtype_id:        3
//, custtype_pattern:   'A[lL][lL]'
//, prodcat_id:         2
//, prodcat_pattern:    '[sS].*[aA]'
//, custgrp_pattern:    'b'
//, warehous_id:        1
  };

  var queryDef = {
    group: ""
  , name:  ""
  , notes: ""
  };

  var mqloptions = {
    valuesub: true
  , literalwrap: true
  };

}

start
  = text:querytext ';'?
    { return '/* group: ' + queryDef.group
         + '\n   name:  ' + queryDef.name
         + '\n   notes: ' + queryDef.notes
         + '\n */\n'      + text + ';'
    }

querytext
  = t1:sqltext    ws? t2:(querytext*)           { return t1 + ' ' + t2.join(' ') }
  / t1:mqlclause  ws? t2:(querytext*)           { return t1 + ' ' + t2.join(' ') }
  / linecomment+  ws? t2:(querytext*)           { return t2.join(' ') }
  / BLOCKCOMMENT+ ws? t2:(querytext*)           { return t2.join(' ') }

sqltext
  = ws? text:([a-zA-Z0-9,/.\-_*=\'\":()~ \t\n;]+)  { return text.join('') }

ws
  = [ \t\n\r]+

mqlclause
  = ws? value:mqlvalue                          { return value }
  / ws? literal:mqlliteral                      { return literal }
  / ws? ifcond:mqlif iftext:querytext
    elifcond:(cond:mqlelseif text:querytext)*
    mqlelse elsetext:querytext?
    mqlendif
    { if (ifcond) { return iftext }
      if (elifcond !== null) {
        for (var i = 0; i < elifcond.length; i++) {
          if (elifcond[i].cond) { return elifcond[i].text }
        }
      }
      return elsetext
    }
  / ws? ifcond:mqlif iftext:querytext
    elifcond:(cond:mqlelseif text:querytext)*
    mqlendif
    { if (ifcond) { return iftext }
      if (elifcond !== null) {
        for (var i = 0; i < elifcond.length; i++) {
          if (elifcond[i].cond) { return elifcond[i].text }
        }
      }
    }
  / ws? list:mqlforeach querytext? mqlendforeach { return list }

mqlvalue
  = MQLOPEN ws? VALUE ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE
   { return mqloptions.valuesub ? ("'" + params[id] + "'") : (':' + id) }

mqlliteral
  = MQLOPEN ws? LITERAL ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE
    { var wrap = mqloptions.literalwrap ? '"' : '';
      return (wrap + params[id] + wrap);
    }

linecomment
  = groupcomment
  / namecomment
  / notescomment
  / simplelinecomment

mqlif
  = MQLOPEN ws? IF ws? cond:mqlcondition ws? MQLCLOSE           { return cond }

mqlelseif
  = MQLOPEN ws? ELSEIF ws? cond:mqlcondition ws? MQLCLOSE       { return cond }

mqlelse
  = MQLOPEN ws? ELSE ws? MQLCLOSE

mqlendif
  = MQLOPEN ws? ENDIF ws? MQLCLOSE

mqlforeach
  = MQLOPEN ws? FOREACH ws? '(' ws? id:quotedidentifier ws? ')' ws? MQLCLOSE { return "foreach: " + id }

mqlendforeach
  = MQLOPEN ws? ENDFOREACH ws? MQLCLOSE

mqlcondition
  = NOT ws+ EXISTS ws? '(' ws? id:quotedidentifier ws? ')'
    { return ! (id in params) }
  / EXISTS ws? '(' ws? id:quotedidentifier ws? ')'
    { return (id in params) }
  / REEXISTS ws? '(' ws? re:regexp ws? ')'
    { for (var prop in params) {
        if (prop.match(re)) {
          return true
        }
      }
      return false
    }
  / ISFIRST ws? '(' ws? id:quotedidentifier ws? ')' { return 'isfirst' }
  / ISLAST  ws? '(' ws? id:quotedidentifier ws? ')' { return 'islast'  }

groupcomment
  = ws? '--' [ \t]* [Gg][Rr][Oo][Uu][Pp] [ \t]* ':' [ \t] id:identifier [ \t]* '\n' { queryDef.group = id }

namecomment
  = ws? '--' [ \t]* [Nn][Aa][Mm][Ee]     [ \t]* ':' [ \t] id:identifier [ \t]* '\n' { queryDef.name = id }

notescomment
  = ws? '--' [ \t]* [Nn][Oo][Tt][Ee][Ss] [ \t]* ':'
    first:linecommenttext '\n'
    rest:(simplelinecomment*)
    { queryDef.notes = first + ' ' + rest.join(' ') }

simplelinecomment
  = ws? '--' ws? content:([^\n]*) '\n'  { return content.join("") }

linecommenttext
  = ws? str:([^\n]*)                    { return str.join("") }

quotedidentifier
  = '"' id:identifier '"'               { return id }
  / "'" id:identifier "'"               { return id }

regexp
  = "'" str:([^']*) "'"                 { return str.join("") }
  / '"' str:([^"]*) '"'                 { return str.join("") }

identifier
  = first:[a-zA-Z_] rest:[a-zA-Z0-9_]*  { return first + rest.join("") }

VALUE      = 'value'
LITERAL    = 'literal'
IF         = 'if'
ELSEIF     = 'elseif'
ELSE       = 'else'
ENDIF      = 'endif'
NOT        = 'not'
EXISTS     = 'exists'
REEXISTS   = 'reExists'
ISFIRST    = 'isFirst'
ISLAST     = 'isLast'
FOREACH    = 'foreach'
ENDFOREACH = 'endforeach'

BLOCKCOMMENT = '/*' [.*] '*/'
MQLOPEN      = '<?'
MQLCLOSE     = '?>'
